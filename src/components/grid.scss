/*============================================================================*\
   Grid System
\*============================================================================*/

/**
 * Usage:
 *
 * ```html
 * <div class="grid">
 *  <div class="grid__row">
 *    <div class="grid__col-12--xxs grid__col-6--s grid__col-4--lg">
 *      ...
 *    </div>
 *    <div class="grid__col-12--xxs grid__col-6--s grid__col-4--lg">
 *      ...
 *    </div>
 *  </div>
 *  ```
 *
 * When nesting grid, you'll need to add the `.grid--nested` modifier to the
 * block element.
 */

// Import dependencies
@import '../framework/breakpoints';
@import '../framework/spaces';

// Local variables
$grid-columns: 12 !default;
$grid-gutters: (
  'xxs': space(2),
  'xs': space(2),
  's': space(4),
  'm': space(4),
  'l': space(4),
  'xl': space(8),
  'xxl': space(8),
) !default;

/**
 * A function helper to avoid having to type `map-get($grid-gutters, ...)`
 * Based on http://css-tricks.com/handling-z-index/
 *
 * @param  {string} $breakpoint The name of the breakpoint
 * @return {number}        The value corresponding to the breakpoint's name
 */
@function gutter($breakpoint) {
  @if not map-has-key($grid-gutters, $breakpoint) {
    @error 'No gutter found in the `$grid-gutters` map for `#{$breakpoint}`.';
    @return '';
  }

  @return map-get($grid-gutters, $breakpoint);
}

/*============================================================================*\
   Grid block
\*============================================================================*/

// Block
.grid {
  min-height: 1px;
  margin-right: auto;
  margin-left: auto;

  // Media queries
  @include for-each-breakpoints using ($breakpoint) {
    padding-right: gutter($breakpoint) * 0.5;
    padding-left: gutter($breakpoint) * 0.5;
  }
}

/* No gutter modifier
\*============================================================================*/

.grid--no-gutter {
  padding-right: 0;
  padding-left: 0;

  // Media queries
  @include for-each-breakpoints using ($breakpoint) {
    padding-right: 0;
    padding-left: 0;
  }
}

/* Nested grid modifier
\*============================================================================*/

/**
 * Nested grid must not have left and right paddings to avoid weird alignment
 * when nesting multiple times. The nested grid is different from the
 * "no-gutter" one by only resetting the padding on the grid block, and not on
 * its row or columns.
 */
.grid--nested {
  padding-right: 0;
  padding-left: 0;

  // Media queries
  @include for-each-breakpoints using ($breakpoint) {
    padding-right: 0;
    padding-left: 0;
  }
}

/*============================================================================*\
   Row element
\*============================================================================*/

// Element
.grid__row {
  position: relative;

  // Media queries
  // stylelint-disable-next-line order/order
  @include for-each-breakpoints using ($breakpoint) {
    margin-right: gutter($breakpoint) * -0.5;
    margin-left: gutter($breakpoint) * -0.5;

    .grid--no-gutter > & {
      margin-right: 0;
      margin-left: 0;
    }
  }

  &::after {
    content: '';
    display: block;
    clear: both;
  }
}

/* Row flex modifiers
\*============================================================================*/

.grid__row--end,
.grid__row--center,
.grid__row--stretch {
  display: flex;
  flex-wrap: wrap;

  // Media queries
  @include for-each-breakpoints using ($breakpoint) {
    .grid__col-left--#{$breakpoint} {
      order: 0;
    }

    .grid__col-right--#{$breakpoint} {
      order: 1;
    }
  }
}

.grid__row--stretch {
  align-items: stretch;
}

.grid__row--center {
  align-items: center;
}

.grid__row--end {
  align-items: flex-end;
}

/*============================================================================*\
   Columns elements
\*============================================================================*/

[class*='grid__col-'] {
  min-height: 1px;

  // Media queries
  // stylelint-disable-next-line order/order
  @include for-each-breakpoints using ($breakpoint) {
    padding-right: gutter($breakpoint) * 0.5;
    padding-left: gutter($breakpoint) * 0.5;

    .grid--no-gutter > .grid__row > & {
      padding-right: 0;
      padding-left: 0;
    }
  }

  .grid__row--stretch > & {
    display: flex;
    align-items: stretch;
  }
}

// Generates the columns class for each breakpoints defined
@include for-each-breakpoints using ($breakpoint) {
  [class*='grid__col-'][class*='--#{$breakpoint}'] {
    display: block;
    float: left;
  }

  [class*='grid__col-'].grid__col-center--#{$breakpoint} {
    float: none;
    margin-right: auto;
    margin-left: auto;
    clear: both;
  }

  [class*='grid__col-'].grid__col-clear--#{$breakpoint} {
    clear: both;
  }

  [class*='grid__col-'].grid__col-no-clear--#{$breakpoint} {
    clear: none;
  }

  [class*='grid__col-'].grid__col-left--#{$breakpoint} {
    float: left;
  }

  [class*='grid__col-'].grid__col-right--#{$breakpoint} {
    float: right;
  }

  .grid__col-0--#{$breakpoint} {
    display: none;
  }

  .grid__pull-0--#{$breakpoint},
  .grid__push-0--#{$breakpoint} {
    margin-left: 0;
  }

  // Generate all columns classes
  @for $i from 1 through $grid-columns {
    .grid__col-#{$i}--#{$breakpoint} {
      width: $i * 100% / $grid-columns;
    }

    .grid__pull-#{$i}--#{$breakpoint} {
      margin-left: $i * -100% / $grid-columns;
    }

    .grid__push-#{$i}--#{$breakpoint} {
      margin-left: $i * 100% / $grid-columns;
    }
  }
}
