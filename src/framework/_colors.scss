/*============================================================================*\
   Colors
\*============================================================================*/

$has-classes: false !default;
$colors: (
  'white': #fff,
  'black': #000,
) !default;

/*============================================================================*\
   Functions
\*============================================================================*/

/**
 * A function helper to avoid having to type `map-get($colors, ...)`
 * Based on http://css-tricks.com/handling-z-index/
 *
 * @param  {string} $color The name of the color
 * @return {number}        The value corresponding to the color's name
 */
@function color($color) {
  // Make sure that `$color` is a string
  @if type-of($color) != 'string' {
    $color: inspect($color);
  }

  @if not map-has-key($colors, $color) {
    @error 'No color found in the `$colors` map for `#{$color}`.';
    @return '';
  }

  @return map-get($colors, $color);
}

/**
 * Alias for the `color($color)` function above
 */
@function c($color) {
  @return color($color);
}

/*============================================================================*\
   Mixins
\*============================================================================*/

/**
 * Abstract loop over all colors with the possibility to exclude some
 *
 * @param  {ArgList} $excludes The colors to exclude from the loop
 *
 * @author Titouan Mathis <titouan@studiometa.fr>
 * @since  1.2.0
 */
@mixin for-each-colors($excludes...) {
  @each $color in $colors {
    $color: nth($color, 1);
    $value: c($color);

    @if not index($excludes, $color) {
      @content ($color, $value);
    }
  }
}

/*============================================================================*\
   Color helpers
\*============================================================================*/

@if $has-classes {
  @include for-each-colors using ($color, $value) {
    // Global helpers
    .color-#{$color} {
      color: $value;
    }

    .color-#{$color}--force {
      color: $value !important;
    }

    .background-#{$color} {
      background-color: $value;
    }

    .background-#{$color}--force {
      background-color: $value !important;
    }

    // SVG helpers
    .fill-#{$color} {
      fill: $value;
    }

    .fill-#{$color}--force {
      fill: $value !important;
    }

    .stroke-#{$color} {
      stroke: $value;
    }

    .stroke-#{$color}--force {
      stroke: $value !important;
    }
  }
}
