/*============================================================================*\
   Flex helpers
\*============================================================================*/

/** @type {Boolean} Do we need classes? */
$has-classes: false !default;

/*============================================================================*\
   Flex display
\*============================================================================*/

@if $has-classes {
  .flex {
    display: flex;
  }

  .flex-inline {
    display: inline-flex;
  }

  // stylelint-disable-next-line order/order
  @include for-each-breakpoints using ($breakpoint) {
    .flex--#{$breakpoint} {
      display: flex;
    }

    .flex-inline--#{$breakpoint} {
      display: inline-flex;
    }
  }
}

/*============================================================================*\
   Align (items / self / content)
\*============================================================================*/

@if $has-classes {
  .align-start {
    align-items: flex-start;
  }

  .align-center {
    align-items: center;
  }

  .align-end {
    align-items: flex-end;
  }

  .align-stretch {
    align-items: stretch;
  }

  .align-start-self {
    align-self: flex-start;
  }

  .align-center-self {
    align-self: center;
  }

  .align-end-self {
    align-self: flex-end;
  }

  .align-stretch-self {
    align-self: stretch;
  }

  .align-start-content {
    align-content: flex-start;
  }

  .align-center-content {
    align-content: center;
  }

  .align-end-content {
    align-content: flex-end;
  }

  .align-stretch-content {
    align-content: stretch;
  }

  .align-around-content {
    align-content: space-around;
  }

  .align-between-content {
    align-content: space-between;
  }

  // stylelint-disable-next-line order/order
  @include for-each-breakpoints using ($breakpoint) {
    .align-start--#{$breakpoint} {
      align-items: flex-start;
    }

    .align-center--#{$breakpoint} {
      align-items: center;
    }

    .align-end--#{$breakpoint} {
      align-items: flex-end;
    }

    .align-stretch--#{$breakpoint} {
      align-items: stretch;
    }

    .align-start-self--#{$breakpoint} {
      align-self: flex-start;
    }

    .align-center-self--#{$breakpoint} {
      align-self: center;
    }

    .align-end-self--#{$breakpoint} {
      align-self: flex-end;
    }

    .align-stretch-self--#{$breakpoint} {
      align-self: stretch;
    }

    .align-start-content--#{$breakpoint} {
      align-content: flex-start;
    }

    .align-center-content--#{$breakpoint} {
      align-content: center;
    }

    .align-end-content--#{$breakpoint} {
      align-content: flex-end;
    }

    .align-stretch-content--#{$breakpoint} {
      align-content: stretch;
    }

    .align-around-content--#{$breakpoint} {
      align-content: space-around;
    }

    .align-between-content--#{$breakpoint} {
      align-content: space-between;
    }
  }
}

/*============================================================================*\
   Justify (content / self)
\*============================================================================*/

@if $has-classes {
  .justify-start {
    justify-content: flex-start;
  }

  .justify-center {
    justify-content: center;
  }

  .justify-end {
    justify-content: flex-end;
  }

  .justify-around {
    justify-content: space-around;
  }

  .justify-between {
    justify-content: space-between;
  }

  .justify-evenly {
    justify-content: space-evenly;
  }

  .justify-start-self {
    justify-self: flex-start;
  }

  .justify-center-self {
    justify-self: center;
  }

  .justify-end-self {
    justify-self: flex-end;
  }

  .justify-around-self {
    justify-self: space-around;
  }

  .justify-between-self {
    justify-self: space-between;
  }

  .justify-evenly-self {
    justify-self: space-evenly;
  }

  // stylelint-disable-next-line order/order
  @include for-each-breakpoints using ($breakpoint) {
    .justify-start--#{$breakpoint} {
      justify-content: flex-start;
    }

    .justify-center--#{$breakpoint} {
      justify-content: center;
    }

    .justify-end--#{$breakpoint} {
      justify-content: flex-end;
    }

    .justify-around--#{$breakpoint} {
      justify-content: space-around;
    }

    .justify-between--#{$breakpoint} {
      justify-content: space-between;
    }

    .justify-evenly--#{$breakpoint} {
      justify-content: space-evenly;
    }

    .justify-start-self--#{$breakpoint} {
      justify-self: flex-start;
    }

    .justify-center-self--#{$breakpoint} {
      justify-self: center;
    }

    .justify-end-self--#{$breakpoint} {
      justify-self: flex-end;
    }

    .justify-around-self--#{$breakpoint} {
      justify-self: space-around;
    }

    .justify-between-self--#{$breakpoint} {
      justify-self: space-between;
    }

    .justify-evenly-self--#{$breakpoint} {
      justify-self: space-evenly;
    }
  }
}

/*============================================================================*\
   Direction
\*============================================================================*/

@if $has-classes {
  .flex-row {
    flex-direction: row;
  }

  .flex-row-reverse {
    flex-direction: row-reverse;
  }

  .flex-column {
    flex-direction: column;
  }

  .flex-column-reverse {
    flex-direction: column-reverse;
  }

  // stylelint-disable-next-line order/order
  @include for-each-breakpoints using ($breakpoint) {
    .flex-row--#{$breakpoint} {
      flex-direction: row;
    }

    .flex-row-reverse--#{$breakpoint} {
      flex-direction: row-reverse;
    }

    .flex-column--#{$breakpoint} {
      flex-direction: column;
    }

    .flex-column-reverse--#{$breakpoint} {
      flex-direction: column-reverse;
    }
  }
}

/*============================================================================*\
   Wrap
\*============================================================================*/

@if $has-classes {
  .flex-wrap {
    flex-wrap: wrap;
  }

  .flex-nowrap {
    flex-wrap: nowrap;
  }

  .flex-wrap-reverse {
    flex-wrap: wrap-reverse;
  }

  // stylelint-disable-next-line order/order
  @include for-each-breakpoints using ($breakpoint) {
    .flex-wrap--#{$breakpoint} {
      flex-wrap: wrap;
    }

    .flex-nowrap--#{$breakpoint} {
      flex-wrap: nowrap;
    }

    .flex-wrap-reverse--#{$breakpoint} {
      flex-wrap: wrap-reverse;
    }
  }
}

/*============================================================================*\
   Grow / Shrink
\*============================================================================*/

/** @type {List} List of flex-grow values to use */
$flex-grows: (0, 1) !default;

/** @type {List} List of flex-shrink values to use */
$flex-shrinks: (0, 1) !default;

/** @type {List} List of flex values to use */
$flexes: (0, auto, none) !default;

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $value in $flex-grows {
    .flex-grow-#{$value} {
      flex-grow: $value;
    }
  }

  @each $value in $flex-shrinks {
    .flex-shrink-#{$value} {
      flex-shrink: $value;
    }
  }

  @each $value in $flexes {
    .flex-#{$value} {
      flex: $value;
    }
  }

  @include for-each-breakpoints using ($breakpoint) {
    @each $value in $flex-grows {
      .flex-grow-#{$value}--#{$breakpoint} {
        flex-grow: $value;
      }
    }

    @each $value in $flex-shrinks {
      .flex-shrink-#{$value}--#{$breakpoint} {
        flex-grow: $value;
      }
    }

    @each $value in $flexes {
      .flex-#{$value}--#{$breakpoint} {
        flex: $value;
      }
    }
  }
}
