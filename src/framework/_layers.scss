/*============================================================================*\
   Layers (z-index) definitions
\*============================================================================*/

/** @type {Boolean} Do we need classes? */
$has-classes: false !default;

/** @type {Boolean} Do we need the `--force` modifiers? */
$layers-with-force: false !default;

/** @type {Boolean} Do we need the `--<breakpoint>` modifiers? */
$layers-with-breakpoints: false !default;

/**
 * Map of layer names and values to use
 *
 * @type {Map}
 */
$layers: (
  goku: 9000,
  default: 1,
  limbo: -999,
) !default;

/*============================================================================*\
   Functions
\*============================================================================*/

/**
 * A function helper to avoid having to type `map-get($layers, ...)`
 * Based on http://css-tricks.com/handling-z-index/
 *
 * @param  {String} $layer    The name of the z-index
 * @param  {Number} $modifier The modifier if needed
 * @return {Number}           The corresponding z-index based on the $layers var
 */
@function layer($layer, $modifier: 0) {
  @if not map-has-key($layers, $layer) {
    @error 'No z-index found in the `$layers` map for `#{$layer}`.';
    @return 'initial';
  }

  $value: map-get($layers, $layer);
  @return $value + $modifier;
}

/**
 * Alias for the `layer($layer, $modifier)` function above
 *
 * @param  {String} $layer    The name of the z-index
 * @param  {Number} $modifier The modifier if needed
 * @return {Number}           The corresponding z-index based on the $layers var
 */
@function l($layer, $modifier: 0) {
  @return layer($layer, $modifier);
}

/**
 * Deprecated alias for the `layer($layer, $modifier)` function
 *
 * @param  {String} $layer    The name of the z-index
 * @param  {Number} $modifier The modifier if needed
 * @return {Number}           The corresponding z-index based on the $layers var
 */
@function z($layer, $modifier: 0) {
  /* stylelint-disable-next-line */
  @warn 'The `z($layer, $modifier)` function is deprecated. Use `l($layer, $modifier)` instead.';
  @return l($layer, $modifier);
}

/*============================================================================*\
   Mixins
\*============================================================================*/

/**
 * Abstract loop over all layers with the possibility to exclude some
 *
 * @param  {ArgList} $excludes The colors to exclude from the loop
 *
 * @author Titouan Mathis <titouan@studiometa.fr>
 * @since  1.2.0
 */
@mixin for-each-layers($excludes...) {
  @each $layer in $layers {
    $layer: nth($layer, 1);
    $value: l($layer);

    @if not index($excludes, $layer) {
      @content ($layer, $value);
    }
  }
}

/*============================================================================*\
   Class helpers
\*============================================================================*/

@if $has-classes {
  @include for-each-layers using ($layer, $value) {
    .layer-#{$layer} {
      z-index: $value;
    }

    @if $layers-with-force {
      .layer-#{$layer}--force {
        z-index: $value !important;
      }
    }
  }

  // Media queries
  @if $layers-with-breakpoints {
    @include for-each-breakpoints using ($breakpoint) {
      @include for-each-layers using ($layer, $value) {
        .layer-#{$layer}--#{$breakpoint} {
          z-index: $value;
        }

        @if $layers-with-force {
          .layer-#{$layer}--force-#{$breakpoint} {
            z-index: $value !important;
          }
        }
      }
    }
  }
}
