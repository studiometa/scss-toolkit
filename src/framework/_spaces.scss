/*============================================================================*\
   Spaces variables
\*============================================================================*/

/**
 * Definition of the space rules
 */
$has-classes: false !default;
$spaces-base: 8px / 16px * 1rem !default;
$spaces: (0, 1, 2, 4, 8, 16, auto) !default;

/*============================================================================*\
   Functions
\*============================================================================*/

/**
 * A function helper to facilitate the usage of the different
 * spaces accross the whole projet.
 *
 * @param  {string} $size The name of the wanted size in the $spaces map
 * @return {string}       The corresponding size
 */
@function space($space) {
  // Find the index of the given space
  $index: index($spaces, $space);

  // If no index, there is no space defined with this name, we throw an error
  @if not $index {
    @error 'No space of size `#{$space}` found in the `$spaces` list.';
    @return '';
  }

  // Get the value of the space
  $value: nth($spaces, $index);

  // Return the value times the base value if our space is a number, or else we
  // return the whole value, allowing us to set `auto` in our `$spaces` list.
  @if (type-of($value) == 'number') {
    @return $value * $spaces-base;
  } @else {
    @return $value;
  }
}

/**
 * Alias for the `space($space)` function above
 */
@function s($space) {
  @return space($space);
}

/*============================================================================*\
   Mixins
\*============================================================================*/

/**
 * Abstract loop over all spaces with the possibility to exclude some
 *
 * @param  {ArgList} $excludes The colors to exclude from the loop
 *
 * @author Titouan Mathis <titouan@studiometa.fr>
 * @since  1.2.0
 */
@mixin for-each-spaces($excludes...) {
  @each $space in $spaces {
    $value: space($space);

    @if not index($excludes, $space) {
      @content ($space, $value);
    }
  }
}

/*============================================================================*\
   Spaces class helpers
\*============================================================================*/

/**
 * Generate helper classes for each space defined in the above map. The naming
 * convention is as follow:
 *
 * ```css
 * .space-{{ type }}-{{ factor }}
 * ```
 *
 * Helper classes are also generated for each breakpoint defined in the grid
 * of the style guide. The breakpoint specific classes are defined as modifiers:
 *
 * ```css
 * .space-{{ type }}-{{ factor }}--{{ breakpoint }}
 * ```
 *
 * For example, to set a global bottom double margin you can use the
 * `.space-mb-2` class. And to set a x-axis quadruple padding for the `xxl`
 * breakpoint you can use the `.space-px-4--xxl` class.
 *
 */

@if $has-classes {
  @include for-each-spaces using ($space, $value) {
    .space-m-#{$space} {
      margin: $value;
    }

    .space-mx-#{$space} {
      margin-right: $value;
      margin-left: $value;
    }

    .space-my-#{$space} {
      margin-top: $value;
      margin-bottom: $value;
    }

    .space-mt-#{$space} {
      margin-top: $value;
    }

    .space-mr-#{$space} {
      margin-right: $value;
    }

    .space-mb-#{$space} {
      margin-bottom: $value;
    }

    .space-ml-#{$space} {
      margin-left: $value;
    }

    // We do not want `auto` as a `padding` value
    @if $space != 'auto' {
      .space-p-#{$space} {
        padding: $value;
      }

      .space-px-#{$space} {
        padding-right: $value;
        padding-left: $value;
      }

      .space-py-#{$space} {
        padding-top: $value;
        padding-bottom: $value;
      }

      .space-pt-#{$space} {
        padding-top: $value;
      }

      .space-pr-#{$space} {
        padding-right: $value;
      }

      .space-pb-#{$space} {
        padding-bottom: $value;
      }

      .space-pl-#{$space} {
        padding-left: $value;
      }
    }
  }

  // Media queries
  @include for-each-breakpoints using ($breakpoint) {
    @include for-each-spaces using ($space, $value) {
      .space-m-#{$space}--#{$breakpoint} {
        margin: $value;
      }

      .space-mx-#{$space}--#{$breakpoint} {
        margin-right: $value;
        margin-left: $value;
      }

      .space-my-#{$space}--#{$breakpoint} {
        margin-top: $value;
        margin-bottom: $value;
      }

      .space-mt-#{$space}--#{$breakpoint} {
        margin-top: $value;
      }

      .space-mr-#{$space}--#{$breakpoint} {
        margin-right: $value;
      }

      .space-mb-#{$space}--#{$breakpoint} {
        margin-bottom: $value;
      }

      .space-ml-#{$space}--#{$breakpoint} {
        margin-left: $value;
      }

      // Again, we do not want `auto` as a value of `padding`
      @if $space != 'auto' {
        .space-p-#{$space}--#{$breakpoint} {
          padding: $value;
        }

        .space-px-#{$space}--#{$breakpoint} {
          padding-right: $value;
          padding-left: $value;
        }

        .space-py-#{$space}--#{$breakpoint} {
          padding-top: $value;
          padding-bottom: $value;
        }

        .space-pt-#{$space}--#{$breakpoint} {
          padding-top: $value;
        }

        .space-pr-#{$space}--#{$breakpoint} {
          padding-right: $value;
        }

        .space-pb-#{$space}--#{$breakpoint} {
          padding-bottom: $value;
        }

        .space-pl-#{$space}--#{$breakpoint} {
          padding-left: $value;
        }
      }
    }
  }
}
