/*============================================================================*\
   Main typography styles
\*============================================================================*/

$has-classes: false !default;

/*============================================================================*\
   Typography mixins
\*============================================================================*/

/**
 * Responsive typograhy
 * @author Mike Riethmuller http://codepen.io/MadeByMike/pen/YPJJYv
 *
 * @param  {integer} $min-width The minimum breakpoint
 * @param  {integer} $max-width The maximum breakpoint
 * @param  {integer} $min-size  The minimum font-size
 * @param  {integer} $max-size  The maximum font-size
 */
@mixin responsive-type(
  $min-width: 0,
  $max-width: 2560,
  $min-size: 12,
  $max-size: 16
) {
  // Set min size
  font-size: $min-size * 1px;

  // Adjust size between `$min-width` et `$max-width`
  @media (min-width: #{$min-width}px) and (max-width: #{$max-width}px) {
    font-size: calc(
      #{$min-size}px + (#{$max-size} - #{$min-size}) *
        ((100vw - #{$min-width}px) / (#{$max-width} - #{$min-width}))
    );
  }

  // Set max size
  @media (min-width: #{$max-width}px) {
    font-size: #{$max-size}px;
  }
}

/**
 * Antialiasing for better font rendering
 */
@mixin type-antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@if $has-classes {
  html,
  input,
  button,
  .type-antialiased {
    @include type-antialiased;
  }
}

/**
 * A map to define all type-sizes and their corresponding line-heights, the
 * first value is the font-size, the seconde the line-height.
 *
 * The `fz($type-size, $unit)` and the `lh($type-size)` functions below can be
 * used to get easily one of the two values.
 *
 * @type {Map}
 */
$type-sizes: (
  'display-3': (
    44px,
    66px,
  ),
  'display-2': (
    36px,
    54px,
  ),
  'display-1': (
    24px,
    32px,
  ),
  'display-0': (
    18px,
    27px,
  ),
  'title-small': (
    20px,
    26px,
  ),
  'title-smaller': (
    18px,
    24px,
  ),
  'body': (
    16px,
    30px,
  ),
  'medium': (
    14px,
    26px,
  ),
  'small': (
    12px,
    22px,
  ),
  'smaller': (
    10px,
    18px,
  ),
) !default;

/*============================================================================*\
   Type sizes helper functions and mixins
\*============================================================================*/

/**
 * A function helper to avoid having to type `map-get($layers, ...)`
 * Based on http://css-tricks.com/handling-z-index/
 *
 * @param  {string} $layer The name of the z-index
 * @param  {number} $var   The modifier if needed
 * @return {number}        The corresponding z-index based on the $layers var
 */
@function font-size($type-size, $unit: 'em') {
  @if not map-has-key($type-sizes, $type-size) {
    @error 'No font-size found in $fonti-sizes map for `#{$type-size}`.';
  }

  $root-font-size: 16px;
  $values: map-get($type-sizes, $type-size);

  // First value is the font-size
  $type-size: nth($values, 1);

  // Second value is the line-height, we divide it by the font-size to get
  // a line-height without unit, which is a best practice.
  $line-height: nth($values, 2) / $type-size;

  @if $unit == 'px' {
    @return $type-size;
  } @else {
    @return #{$type-size / $root-font-size + $unit};
  }
}

/**
 * Alias for the `font-size($type-size, $unit)` function above
 */
@function fz($type-size, $unit: 'em') {
  @return font-size($type-size, $unit);
}

/**
 * A function helper to get the computed line-height of the given font-size
 * @param  {string} $type-size The name of the font-size
 * @return {string}            The corresponding line-height
 */
@function line-height($type-size) {
  @if not map-has-key($type-sizes, $type-size) {
    @error 'No font-size found in $type-sizes map for `#{$type-size}`.';
  }

  $values: map-get($type-sizes, $type-size);

  // First value is the font-size
  $type-size: nth($values, 1);

  // Second value is the line-height, we divide it by the font-size to get
  // a line-height without unit, which is a best practice.
  $line-height: nth($values, 2) / $type-size;

  @return $line-height;
}

/**
 * Alias for the `line-height($type-size)` function above
 */
@function lh($type-size) {
  @return line-height($type-size);
}

/**
 * A mixin to get both font-size and line-height given a named font-size
 * @param  {string} $type-size The font-size name
 * @param  {string} $unit      The unit for the font-size value
 * @return {string}            The `font-size` and `line-height` declarations
 */
@mixin font-size($type-size, $unit: 'em') {
  font-size: fz($type-size, $unit);
  line-height: lh($type-size);
}

/**
 * Alias for the `font-size($type-size, $unit)` mixin defined above
 */
@mixin fz($type-size, $unit: 'em') {
  @include font-size($type-size, $unit);
}

/*============================================================================*\
   Type font-size helpers
\*============================================================================*/

@if $has-classes {
  @each $type-size in $type-sizes {
    $key: nth($type-size, 1);

    .type-#{$key} {
      @include fz($key);
    }

    .type-rem-#{$key} {
      @include fz($key, 'rem');
    }
  }

  // Media queries
  @include for-each-breakpoints using ($breakpoint) {
    @each $type-size in $type-sizes {
      $size: nth($type-size, 1);

      .type-#{$size}--#{$breakpoint} {
        @include fz($size);
      }

      .type-rem-#{$size}--#{$breakpoint} {
        @include fz($size);
      }
    }
  }
}

/*============================================================================*\
   Type font families helpers
\*============================================================================*/

$type-webfont-dir: '/source/fonts/' !default;
$type-webfont-display: auto !default;

$type-fonts: (
  serif: (
    name: Georgia,
    stack: 'Georgia, serif',
    webfonts: (
      (
        filename: 'georgia-regular',
        weight: 400,
        style: normal,
      ),
      (
        filename: 'georgia-italic',
        weight: 400,
        style: italic,
      ),
      (
        filename: 'georgia-bold',
        weight: 700,
        style: normal,
      ),
      (
        filename: 'georgia-bold-italic',
        weight: 700,
        style: italic,
      ),
    ),
  ),
  sans-serif: (
    name: Arial,
    stack: 'Arial, sans-serif',
    webfonts: (
      (
        filename: 'arial-regular',
        weight: 400,
        style: normal,
      ),
      (
        filename: 'arial-italic',
        weight: 400,
        style: italic,
      ),
      (
        filename: 'arial-bold',
        weight: 700,
        style: normal,
      ),
      (
        filename: 'arial-bold-italic',
        weight: 700,
        style: italic,
      ),
    ),
  ),
) !default;

@if $has-classes {
  @each $font in $type-fonts {
    $key: nth($font, 1);
    $font: map-get($type-fonts, $key);
    $name: map-get($font, 'name');
    $stack: map-get($font, 'stack');
    $webfonts: map-get($font, 'webfonts');

    .type-#{$key} {
      font-family: unquote($stack);
    }

    @each $webfont in $webfonts {
      $file: map-get($webfont, 'filename');
      $weight: map-get($webfont, 'weight');
      $style: map-get($webfont, 'style');

      @font-face {
        font-family: $name;
        src: url('#{$type-webfont-dir + $file}.woff2') format('woff2'),
          url('#{$type-webfont-dir + $file}.woff') format('woff');
        font-weight: $weight;
        font-style: $style;
        font-display: $type-webfont-display;
      }
    }
  }
}

/*============================================================================*\
   Type alignement helpers
\*============================================================================*/

$type-alignments: (left, center, right) !default;

@if $has-classes {
  @each $alignment in $type-alignments {
    .type-align-#{$alignment} {
      text-align: #{$alignment};
    }
  }

  @include for-each-breakpoints using ($breakpoint) {
    @each $alignment in $type-alignments {
      .type-align-#{$alignment}--#{$breakpoint} {
        text-align: #{$alignment};
      }
    }
  }
}

/*============================================================================*\
   Type font weight helpers
\*============================================================================*/

$type-weights: (300, 400, 700) !default;

@if $has-classes {
  @each $weight in $type-weights {
    .type-weight-#{$weight} {
      font-weight: $weight;
    }
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @include for-each-breakpoints using ($breakpoint) {
    @each $weight in $type-weights {
      .type-weight-#{$weight}--#{$breakpoint} {
        font-weight: $weight;
      }
    }
  }
}

/*============================================================================*\
   Type spacing
\*============================================================================*/

$type-spacings: (25, 50, 100, 200) !default;

@if $has-classes {
  @each $spacing in $type-spacings {
    $value: $spacing / 1000;

    .type-spacing-#{$spacing} {
      letter-spacing: #{$value}em;
    }
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @include for-each-breakpoints using ($breakpoint) {
    @each $spacing in $type-spacings {
      $value: $spacing / 1000;

      .type-spacing-#{$spacing}--#{$breakpoint} {
        letter-spacing: #{$value}em;
      }
    }
  }
}

/*============================================================================*\
   Type transform
\*============================================================================*/

$type-transforms: (uppercase, lowercase, capitalize) !default;

@if $has-classes {
  @each $transform in $type-transforms {
    .type-transform-#{$transform} {
      text-transform: #{$transform};
    }
  }
}

/*============================================================================*\
   Type decoration
\*============================================================================*/

$type-decorations: (none, underline) !default;

@if $has-classes {
  @each $decoration in $type-decorations {
    .type-decoration-#{$decoration} {
      text-decoration: #{$decoration};
    }
  }
}
