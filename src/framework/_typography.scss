/*============================================================================*\
   Main typography styles
\*============================================================================*/

/** @type {Boolean} Do we need classes? */
$has-classes: false !default;

/*============================================================================*\
   Generic mixins
\*============================================================================*/

/**
 * Responsive typograhy
 * @author Mike Riethmuller http://codepen.io/MadeByMike/pen/YPJJYv
 *
 * @param  {integer} $min-width The minimum breakpoint
 * @param  {integer} $max-width The maximum breakpoint
 * @param  {integer} $min-size  The minimum font-size
 * @param  {integer} $max-size  The maximum font-size
 */
@mixin responsive-type(
  $min-width: 0,
  $max-width: 2560,
  $min-size: 12,
  $max-size: 16
) {
  // Set min size
  font-size: $min-size * 1px;

  // Adjust size between `$min-width` et `$max-width`
  @media (min-width: #{$min-width}px) and (max-width: #{$max-width}px) {
    font-size: calc(
      #{$min-size}px + (#{$max-size} - #{$min-size}) *
        ((100vw - #{$min-width}px) / (#{$max-width} - #{$min-width}))
    );
  }

  // Set max size
  @media (min-width: #{$max-width}px) {
    font-size: #{$max-size}px;
  }
}

/**
 * Antialiasing for better font rendering
 */
@mixin type-antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@if $has-classes {
  .type-antialiased {
    &,
    input,
    button {
      @include type-antialiased;
    }
  }
}

/*============================================================================*\
   Type sizes definitions
\*============================================================================*/

/**
 * A map to define all type-sizes and their corresponding line-heights, the
 * first value is the font-size, the seconde the line-height.
 *
 * @type {Map}
 */
$type-sizes: (
  display-1: (
    default: (
      size: 32px,
      line-height: 48px,
      weight: 700,
    ),
  ),
  display-2: (
    size: 24px,
    line-height: 36px,
    weight: 700,
  ),
  body: (
    size: 16px,
  ),
  small: (
    size: 12px,
  ),
) !default;

/**
 * A mixin to get both font-size and line-height given a named font-size
 *
 * @param  {string} $type-size The font-size name
 * @param  {string} $unit      The unit for the font-size value
 * @return {string}            The `font-size` and `line-height` declarations
 */
@mixin font-size($type-size, $unit: 'em', $breakpoint: 'default') {
  @if not map-has-key($type-sizes, $type-size) {
    @error 'No font-size definition found in $type-sizes map for `#{$type-size}`.';
  }

  $type-size-definition: map-get($type-sizes, $type-size);

  // 1. Get the wanted breakpoint defintion if its key exists.
  // 2. If the key does not exists and the $breakpoint value is default, the
  // font size definition has no breakpoint definition.
  // 3. If the 2 preceding condition are not met, there is no size corresponding
  // to the parameters, so do nothing.
  @if map-has-key($type-size-definition, $breakpoint) {
    $type-size: map-get($type-size-definition, $breakpoint);
  } @else if $breakpoint == 'default' {
    $type-size: $type-size-definition;
  } @else {
    $type-size: false;
  }

  @if not $type-size == false {
    $font-size: map-get($type-size, 'size');

    @if $unit == 'px' {
      font-size: $font-size;
    } @else {
      font-size: #{($font-size / 16px) + $unit};
    }

    @if map-has-key($type-size, 'weight') {
      font-weight: map-get($type-size, 'weight');
    }

    @if map-has-key($type-size, 'line-height') {
      line-height: map-get($type-size, 'line-height') / $font-size;
    }
  }
}

/**
 * Alias for the `font-size($type-size, $unit)` mixin defined above
 */
@mixin fz($type-size, $unit: 'em', $breakpoint: 'default') {
  @include font-size($type-size, $unit, $breakpoint);
}

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $type-size in $type-sizes {
    $key: nth($type-size, 1);

    .type-#{$key} {
      @include fz($key);

      // Media queries
      @include for-each-breakpoints using ($breakpoint) {
        @include fz($key, 'em', $breakpoint);
      }
    }

    .type-rem-#{$key} {
      @include fz($key, 'rem');

      // Media queries
      @include for-each-breakpoints using ($breakpoint) {
        @include fz($key, 'rem', $breakpoint);
      }
    }
  }
}

/*============================================================================*\
   Type font families definitions
\*============================================================================*/

/** @type {String} The path to the webfonts directory */
$type-webfont-dir: '/static/fonts/' !default;

/** @type {String} The value for all `font-display` properties */
$type-webfont-display: auto !default;

/**
 * A map to define all font-families specifications which we might refer to by a
 * named identifier. The map is formatted as follow:
 *
 * (
 *   <identifier>: (
 *     name: <font-family-name>,
 *     stack: <font-family-stack>,
 *     webfonts: (
 *       (
 *         filename: <webfont-filename>,
 *         weight: <webfont-weight>,
 *         style: <webfont-style>,
 *       ),
 *     ),
 *   ),
 * )
 *
 * @type {Map}
 */
$type-fonts: (
  serif: (
    name: Georgia,
    stack: 'Georgia, serif',
    webfonts: (
      (
        filename: 'georgia-regular',
        weight: 400,
        style: normal,
      ),
    ),
  ),
  sans-serif: (
    name: Arial,
    stack: 'Arial, sans-serif',
    webfonts: (
      (
        filename: 'arial-regular',
        weight: 400,
        style: normal,
      ),
    ),
  ),
) !default;

/**
 * A function to get a font-family stack by its identifier
 *
 * @param  {string} $type-font The font-family identifier
 * @return {string}            The font-family defined stack
 */
@function font-family($type-font) {
  @if not map-has-key($type-fonts, $type-font) {
    @error 'No font-size found in $type-fonts map for `#{$type-font}`.';
  }

  $font: map-get($type-fonts, $type-font);
  $stack: map-get($font, 'stack');

  @return unquote($stack);
}

/**
 * Alias for the `font-family($type-font)` function defined above
 *
 * @param  {string} $type-font The font-family identifier
 * @return {string}            The font-family defined stack
 */
@function ff($type-font) {
  @return font-family($type-font);
}

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $font in $type-fonts {
    $key: nth($font, 1);
    $font: map-get($type-fonts, $key);
    $stack: map-get($font, 'stack');

    .type-#{$key} {
      font-family: unquote($stack);
    }

    @if map-has-key($font, 'webfonts') and map-has-key($font, 'name') {
      $name: map-get($font, 'name');
      $webfonts: map-get($font, 'webfonts');
      @each $webfont in $webfonts {
        $file: map-get($webfont, 'filename');
        $weight: map-get($webfont, 'weight');
        $style: map-get($webfont, 'style');

        @font-face {
          font-family: $name;
          font-style: $style;
          font-weight: $weight;
          src: url('#{$type-webfont-dir + $file}.woff2') format('woff2'),
            url('#{$type-webfont-dir + $file}.woff') format('woff');
          font-display: $type-webfont-display;
        }
      }
    }
  }
}

/*============================================================================*\
   Type alignement definition
\*============================================================================*/

/** @type {List} List of alignment values to use */
$type-alignments: (left, center, right) !default;

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $alignment in $type-alignments {
    .type-align-#{$alignment} {
      text-align: #{$alignment};
    }
  }

  @include for-each-breakpoints using ($breakpoint) {
    @each $alignment in $type-alignments {
      .type-align-#{$alignment}--#{$breakpoint} {
        text-align: #{$alignment};
      }
    }
  }
}

/*============================================================================*\
   Type font weight helpers
\*============================================================================*/

/** @type {List} List of font weights values to use */
$type-weights: (300, 400, 700) !default;

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $weight in $type-weights {
    .type-weight-#{$weight} {
      font-weight: $weight;
    }
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @include for-each-breakpoints using ($breakpoint) {
    @each $weight in $type-weights {
      .type-weight-#{$weight}--#{$breakpoint} {
        font-weight: $weight;
      }
    }
  }
}

/*============================================================================*\
   Type spacings definitions
\*============================================================================*/

/** @type {List} List of letter spacings values to use */
$type-spacings: (25, 50, 100, 200) !default;

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $spacing in $type-spacings {
    $value: $spacing / 1000;

    .type-spacing-#{$spacing} {
      letter-spacing: #{$value}em;
    }
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @include for-each-breakpoints using ($breakpoint) {
    @each $spacing in $type-spacings {
      $value: $spacing / 1000;

      .type-spacing-#{$spacing}--#{$breakpoint} {
        letter-spacing: #{$value}em;
      }
    }
  }
}

/*============================================================================*\
   Type transforms definitions
\*============================================================================*/

/** @type {List} List of text transform values to use */
$type-transforms: (uppercase, lowercase, capitalize) !default;

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $transform in $type-transforms {
    .type-transform-#{$transform} {
      text-transform: #{$transform};
    }
  }
}

/*============================================================================*\
   Type decorations definitions
\*============================================================================*/

/** @type {List} List of text decoration values to use */
$type-decorations: (none, underline) !default;

/* Class helpers
\*============================================================================*/

@if $has-classes {
  @each $decoration in $type-decorations {
    .type-decoration-#{$decoration} {
      text-decoration: #{$decoration};
    }
  }
}
