/*============================================================================*\
   Main typography styles
\*============================================================================*/

$has-classes: false !default;
$font-dir: '/source/fonts/' !default;
$font-name-serif: Georgia !default;
$font-name-sans: Arial !default;
$font-family-serif: $font-name-serif, serif !default;
$font-family-sans: $font-name-sans, sans-serif !default;
$font-display: auto !default;

$font-faces: (
  $font-name-serif 'type-serif-regular' 400 normal,
  $font-name-sans 'type-sans-regular' 400 normal
) !default;

/**
 * A map to define all font-sizes and their corresponding line-heights, the
 * first value is the font-size, the seconde the line-height.
 *
 * The `fz($font-size, $unit)` and the `lh($font-size)` functions below can be
 * used to get easily one of the two values.
 *
 * @type {Map}
 */
$font-sizes: (
  'display-3': (
    44px,
    66px,
  ),
  'display-2': (
    36px,
    54px,
  ),
  'display-1': (
    24px,
    32px,
  ),
  'display-0': (
    18px,
    27px,
  ),
  'title-small': (
    20px,
    26px,
  ),
  'title-smaller': (
    18px,
    24px,
  ),
  'body': (
    16px,
    30px,
  ),
  'medium': (
    14px,
    26px,
  ),
  'small': (
    12px,
    22px,
  ),
  'smaller': (
    10px,
    18px,
  ),
) !default;

/*============================================================================*\
   Font-sizes helper function
\*============================================================================*/

/**
 * A function helper to avoid having to type `map-get($layers, ...)`
 * Based on http://css-tricks.com/handling-z-index/
 *
 * @param  {string} $layer The name of the z-index
 * @param  {number} $var   The modifier if needed
 * @return {number}        The corresponding z-index based on the $layers var
 */
@function font-size($font-size, $unit: 'em') {
  @if not map-has-key($font-sizes, $font-size) {
    @error 'No font-size found in $fonti-sizes map for `#{$font-size}`.';
  }

  $root-font-size: 16px;
  $values: map-get($font-sizes, $font-size);

  // First value is the font-size
  $font-size: nth($values, 1);

  // Second value is the line-height, we divide it by the font-size to get
  // a line-height without unit, which is a best practice.
  $line-height: nth($values, 2) / $font-size;

  @if $unit == 'px' {
    @return $font-size;
  } @else {
    @return #{$font-size / $root-font-size + $unit};
  }
}

/**
 * Alias for the `font-size($font-size, $unit)` function above
 */
@function fz($font-size, $unit: 'em') {
  @return font-size($font-size, $unit);
}

/**
 * A function helper to get the computed line-height of the given font-size
 * @param  {string} $font-size The name of the font-size
 * @return {string}            The corresponding line-height
 */
@function line-height($font-size) {
  @if not map-has-key($font-sizes, $font-size) {
    @error 'No font-size found in $font-sizes map for `#{$font-size}`.';
  }

  $values: map-get($font-sizes, $font-size);

  // First value is the font-size
  $font-size: nth($values, 1);

  // Second value is the line-height, we divide it by the font-size to get
  // a line-height without unit, which is a best practice.
  $line-height: nth($values, 2) / $font-size;

  @return $line-height;
}

/**
 * Alias for the `line-height($font-size)` function above
 */
@function lh($font-size) {
  @return line-height($font-size);
}

/**
 * A mixin to get both font-size and line-height given a named font-size
 * @param  {string} $font-size The font-size name
 * @param  {string} $unit      The unit for the font-size value
 * @return {string}            The `font-size` and `line-height` declarations
 */
@mixin font-size($font-size, $unit: 'em') {
  font-size: fz($font-size, $unit);
  line-height: lh($font-size);
}

/**
 * Alias for the `font-size($font-size, $unit)` mixin defined above
 */
@mixin fz($font-size, $unit: 'em') {
  @include font-size($font-size, $unit);
}

/*============================================================================*\
   Fontaces declarations
\*============================================================================*/
@if $has-classes {
  @each $font-face in $font-faces {
    $name: nth($font-face, 1);
    $file: nth($font-face, 2);
    $weight: nth($font-face, 3);
    $style: nth($font-face, 4);

    @font-face {
      font-family: $name;
      src: url('#{$font-dir + $file}.woff2') format('woff2'),
        url('#{$font-dir + $file}.woff') format('woff');
      font-weight: $weight;
      font-style: $style;
      font-display: $font-display;
    }
  }
}

/*============================================================================*\
   Responsive type mixin
\*============================================================================*/

/**
 * Responsive typograhy
 * @author Mike Riethmuller http://codepen.io/MadeByMike/pen/YPJJYv
 * @param  {integer} $min-width The minimum breakpoint
 * @param  {integer} $max-width The maximum breakpoint
 * @param  {integer} $min-size  The minimum font-size
 * @param  {integer} $max-size  The maximum font-size
 * @return {void}
 */
@mixin responsive-type(
  $min-width: 0,
  $max-width: 2560,
  $min-size: 12,
  $max-size: 16
) {
  // Set min size
  font-size: $min-size * 1px;

  // Adjust size between `$min-width` et `$max-width`
  @media (min-width: #{$min-width}px) and (max-width: #{$max-width}px) {
    font-size: calc(
      #{$min-size}px + (#{$max-size} - #{$min-size}) *
        ((100vw - #{$min-width}px) / (#{$max-width} - #{$min-width}))
    );
  }

  // Set max size
  @media (min-width: #{$max-width}px) {
    font-size: #{$max-size}px;
  }
}

/*============================================================================*\
   Antialiasing mixin
\*============================================================================*/

/**
 * Antialiasing for better font rendering
 */
@mixin type-antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@if $has-classes {
  html,
  input,
  button,
  .type-antialiased {
    @include type-antialiased;
  }
}

/*============================================================================*\
   Type font-size helpers
\*============================================================================*/

@if $has-classes {
  @each $font-size in $font-sizes {
    $key: nth($font-size, 1);

    .type-#{$key} {
      @include fz($key);
    }

    .type-rem-#{$key} {
      @include fz($key, 'rem');
    }
  }

  // Media queries
  @include for-each-breakpoints using ($breakpoint) {
    @each $font-size in $font-sizes {
      $size: nth($font-size, 1);

      .type-#{$size}--#{$breakpoint} {
        @include fz($size);
      }

      .type-rem-#{$size}--#{$breakpoint} {
        @include fz($size);
      }
    }
  }
}

/*============================================================================*\
   Type alignement helpers
\*============================================================================*/

@if $has-classes {
  .type-center {
    text-align: center;
  }

  .type-left {
    text-align: left;
  }

  .type-right {
    text-align: right;
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @include for-each-breakpoints using ($breakpoint) {
    .type-center--#{$breakpoint} {
      text-align: center;
    }

    .type-left--#{$breakpoint} {
      text-align: left;
    }

    .type-right--#{$breakpoint} {
      text-align: right;
    }
  }
}

/*============================================================================*\
   Type font families helpers
\*============================================================================*/

@if $has-classes {
  .type-serif {
    font-family: $font-family-serif;
  }

  .type-sans {
    font-family: $font-family-sans;
  }
}

/*============================================================================*\
   Type font weight helpers
\*============================================================================*/

$font-weights: (300, 400, 700) !default;

@if $has-classes {
  @each $font-weight in $font-weights {
    .type-weight-#{$font-weight} {
      font-weight: $font-weight;
    }
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @include for-each-breakpoints using ($breakpoint) {
    @each $font-weight in $font-weights {
      .type-weight-#{$font-weight}--#{$breakpoint} {
        font-weight: $font-weight;
      }
    }
  }
}

/*============================================================================*\
   Type spacing
\*============================================================================*/

$type-spacings: (25, 50, 100, 200) !default;

@if $has-classes {
  @each $spacing in $type-spacings {
    $value: $spacing / 1000;

    .type-spacing-#{$spacing} {
      letter-spacing: #{$value}em;
    }
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @include for-each-breakpoints using ($breakpoint) {
    @each $spacing in $type-spacings {
      $value: $spacing / 1000;

      .type-spacing-#{$spacing}--#{$breakpoint} {
        letter-spacing: #{$value}em;
      }
    }
  }
}

/*============================================================================*\
   Type transform
\*============================================================================*/

@if $has-classes {
  .type-uppercase {
    text-transform: uppercase;
  }

  .type-lowercase {
    text-transform: lowercase;
  }

  .type-capitalize {
    text-transform: capitalize;
  }

  .type-no-underline {
    text-decoration: none;
  }

  .type-underline {
    text-decoration: underline;
  }
}

/*============================================================================*\
   Type font defaults
\*============================================================================*/

@if $has-classes {
  a {
    color: inherit;
  }
}
