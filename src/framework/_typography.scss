/*============================================================================*\
   Main typography styles
\*============================================================================*/

$has-classes: false !default;
$font-dir: '/source/fonts/' !default;
$font-name-serif: Georgia !default;
$font-name-sans: Arial !default;
$font-family-serif: $font-name-serif, serif !default;
$font-family-sans: $font-name-sans, sans-serif !default;

$font-faces: (
  $font-name-serif 'type-serif-regular' 400 normal,
  $font-name-sans 'type-sans-regular' 400 normal
) !default;

/**
 * A map to define all font-sizes and their corresponding line-heights, the
 * first value is the font-size, the seconde the line-height.
 *
 * The `fz($font-size, $unit)` and the `lh($font-size)` functions below can be
 * used to get easily one of the two values.
 *
 * @type {Map}
 */
$font-sizes: (
  'display-3': (
    44px,
    66px,
  ),
  'display-2': (
    36px,
    54px,
  ),
  'display-1': (
    24px,
    32px,
  ),
  'display-0': (
    18px,
    27px,
  ),
  'title-small': (
    20px,
    26px,
  ),
  'title-smaller': (
    18px,
    24px,
  ),
  'body': (
    16px,
    30px,
  ),
  'medium': (
    14px,
    26px,
  ),
  'small': (
    12px,
    22px,
  ),
  'smaller': (
    10px,
    18px,
  ),
) !default;

/*============================================================================*\
   Font-sizes helper function
\*============================================================================*/

/**
 * A function helper to avoid having to type `map-get($layers, ...)`
 * Based on http://css-tricks.com/handling-z-index/
 *
 * @param  {string} $layer The name of the z-index
 * @param  {number} $var   The modifier if needed
 * @return {number}        The corresponding z-index based on the $layers var
 */
@function fz($font-size, $unit: 'em') {
  @if not map-has-key($font-sizes, $font-size) {
    @error 'No font-size found in $fonti-sizes map for `#{$font-size}`.';
  }

  $root-font-size: 16px;
  $values: map-get($font-sizes, $font-size);

  // First value is the font-size
  $font-size: nth($values, 1);

  // Second value is the line-height, we divide it by the font-size to get
  // a line-height without unit, which is a best practice.
  $line-height: nth($values, 2) / $font-size;

  @if $unit == 'px' {
    @return $font-size;
  } @else {
    @return #{$font-size / $root-font-size + $unit};
  }
}

/**
 * A function helper to get the computed line-height of the given font-size
 * @param  {string} $font-size The name of the font-size
 * @return {string}            The corresponding line-height
 */
@function lh($font-size) {
  @if not map-has-key($font-sizes, $font-size) {
    @error 'No font-size found in $fonti-sizes map for `#{$font-size}`.';
  }

  $values: map-get($font-sizes, $font-size);

  // First value is the font-size
  $font-size: nth($values, 1);

  // Second value is the line-height, we divide it by the font-size to get
  // a line-height without unit, which is a best practice.
  $line-height: nth($values, 2) / $font-size;

  @return $line-height;
}

/**
 * A mixin to get both font-size and line-height given a named font-size
 * @param  {string} $font-size The font-size name
 * @param  {string} $unit      The unit for the font-size value
 * @return {string}            The `font-size` and `line-height` declarations
 */
@mixin fz($font-size, $unit: 'em') {
  font-size: fz($font-size, $unit);
  line-height: lh($font-size);
}

/*============================================================================*\
   Fontaces declarations
\*============================================================================*/

@if $has-classes {
  @each $font-face in $font-faces {
    $name: nth($font-face, 1);
    $file: nth($font-face, 2);
    $weight: nth($font-face, 3);
    $style: nth($font-face, 4);

    @font-face {
      font-family: $name;
      src: url('#{$font-dir + $file}.woff2') format('woff2'),
        url('#{$font-dir + $file}.woff') format('woff');
      font-weight: $weight;
      font-style: $style;
    }
  }
}

/*============================================================================*\
   Responsive type mixin
\*============================================================================*/

/**
 * Responsive typograhy
 * @author Mike Riethmuller http://codepen.io/MadeByMike/pen/YPJJYv
 * @param  {integer} $min-width The minimum breakpoint
 * @param  {integer} $max-width The maximum breakpoint
 * @param  {integer} $min-font  The minimum font-size
 * @param  {integer} $max-font  The maximum font-size
 * @return {void}
 */
@mixin responsive-type(
  $min-width: 0,
  $max-width: 2560,
  $min-font: 12,
  $max-font: 16
) {
  // Set min size
  font-size: $min-font * 1px;

  // Adjust size between `$min-width` et `$max-width`
  @media (min-width: #{$min_width}px) and (max-width: #{$max_width}px) {
    font-size: calc(
      #{$min_font}px + (#{$max_font} - #{$min_font}) *
        ((100vw - #{$min_width}px) / (#{$max_width} - #{$min_width}))
    );
  }

  // Set max size
  @media (min-width: #{$max_width}px) {
    font-size: #{$max_font}px;
  }
}

/*============================================================================*\
   Antialiasing mixin
\*============================================================================*/

/**
 * Antialiasing for better font rendering
 */
@mixin type-antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@if $has-classes {
  html,
  input,
  button,
  .type-antialiased {
    @include type-antialiased;
  }
}

/*============================================================================*\
   Type font-size helpers
\*============================================================================*/

@if $has-classes {
  @each $font-size in $font-sizes {
    $key: nth($font-size, 1);

    .type-#{$key} {
      @include fz($key);
    }

    .type-rem-#{$key} {
      @include fz($key, 'rem');
    }
  }

  // Media queries
  @each $breakpoint in $breakpoints {
    $breakpoint: nth($breakpoint, 1);

    @media all and #{md($breakpoint)} {
      @each $font-size in $font-sizes {
        $key: nth($font-size, 1);

        .type-#{$key}--#{$breakpoint} {
          @include fz($key);
        }

        .type-rem-#{$key}--#{$breakpoint} {
          @include fz($key);
        }
      }
    }
  }
}

/*============================================================================*\
   Type alignement helpers
\*============================================================================*/

@if $has-classes {
  .type-center {
    text-align: center;
  }

  .type-left {
    text-align: left;
  }

  .type-right {
    text-align: right;
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @each $breakpoint in $breakpoints {
    $breakpoint: nth($breakpoint, 1);

    @media #{md($breakpoint)} {
      /**
       * Margin spacers
       */

      .type-center--#{$breakpoint} {
        text-align: center;
      }

      .type-left--#{$breakpoint} {
        text-align: left;
      }

      .type-right--#{$breakpoint} {
        text-align: right;
      }
    }
  }
}

/*============================================================================*\
   Type font families helpers
\*============================================================================*/

@if $has-classes {
  .type-serif {
    font-family: $font-family-serif;
  }

  .type-sans {
    font-family: $font-family-sans;
  }
}

/*============================================================================*\
   Type font weight helpers
\*============================================================================*/

@if $has-classes {
  .type-light {
    font-weight: 300;
  }

  .type-regular {
    font-weight: 400;
  }

  .type-semibold {
    font-weight: 600;
  }

  .type-bold {
    font-weight: 700;
  }

  .type-extrabold {
    font-weight: 800;
  }

  /**
   * Generate helpers for each defined breakpoints
   */
  @each $breakpoint in $breakpoints {
    $breakpoint: nth($breakpoint, 1);

    @media #{md($breakpoint)} {
      .type-light--#{$breakpoint} {
        font-weight: 300;
      }

      .type-regular--#{$breakpoint} {
        font-weight: 400;
      }

      .type-semibold--#{$breakpoint} {
        font-weight: 600;
      }

      .type-bold--#{$breakpoint} {
        font-weight: 700;
      }

      .type-extrabold--#{$breakpoint} {
        font-weight: 800;
      }
    }
  }
}

/*============================================================================*\
   Type spacing
\*============================================================================*/

@if $has-classes {
  .type-spacing--200 {
    letter-spacing: 0.285ch;
  }
}

/*============================================================================*\
   Type transform
\*============================================================================*/

@if $has-classes {
  .type-uppercase {
    text-transform: uppercase;
  }

  .type-capitalize {
    text-transform: capitalize;
  }

  .type-no-underline {
    text-decoration: none;
  }
}

/*============================================================================*\
   Type font defaults
\*============================================================================*/

@if $has-classes {
  h1,
  h2,
  h3,
  h4 {
    font-family: $font-family-serif;
  }

  a {
    color: inherit;
  }
}
